<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Desnbo</title>
  <subtitle>Done is better than perfect.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2017-05-14T08:20:03.034Z</updated>
  <id>/</id>
  
  <author>
    <name>Desnbo</name>
    <email>deshbo@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo Yilia 主题添加目录</title>
    <link href="/2017/04/20/Hexo-yilia-toc/"/>
    <id>/2017/04/20/Hexo-yilia-toc/</id>
    <published>2017-04-19T20:44:37.000Z</published>
    <updated>2017-05-14T08:20:03.034Z</updated>
    
    <content type="html"><![CDATA[<p>自从使用Hexo建博客以来,前后体验过好几种主题，其中 <em>Litten</em> 的 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a>, 简洁优雅,十分喜欢. 在此表示感谢!!<br>Yilia 主题目前还没有添加toc目录功能,长篇幅文章有目录会显得层次清晰,所以简单的实现并记录之!    </p>
<a id="more"></a>
<h3 id="修改hexo主题的ejs文件"><a href="#修改hexo主题的ejs文件" class="headerlink" title="修改hexo主题的ejs文件"></a>修改hexo主题的ejs文件</h3><p><strong>编辑文章显示页面的模板</strong><br>编辑 <code>themes/yilia/layout/_partial/article.ejs</code>文件。在该文件中<code>&lt;%- post.content %&gt;</code> 之前加入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;% &#125; else &#123; %&gt;</div><div class="line"></div><div class="line">  &lt;!--Table of Contents begin--&gt;</div><div class="line">  &lt;% if (  post.toc || ( theme.toc &amp;&amp; post.toc !== false) &amp;&amp; !index)&#123; %&gt;</div><div class="line">    &lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;</div><div class="line">      &lt;strong class=&quot;toc-title&quot;&gt;目录&lt;/strong&gt;</div><div class="line">      &lt;a class=&quot;js-toggle-toc&quot; href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</div><div class="line">      &lt;div class=&quot;toc-content&quot;&gt;</div><div class="line">        &lt;%- toc(post.content) %&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;% &#125; %&gt;</div><div class="line">  &lt;!--Table of Contents end --&gt;</div><div class="line"></div><div class="line">  &lt;%- post.content %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<p>如果生成的目录不需要前面的编号，将 <code>&lt;%- toc(post.content) %&gt;</code><br>修改为 <code>&lt;%- toc(post.content, {list_number: false}) %&gt;</code></p>
<h3 id="开启目录"><a href="#开启目录" class="headerlink" title="开启目录"></a>开启目录</h3><p><strong>1. 默认开启：</strong><br>主题配置文件下 <code>toc: true</code> ,默认开启全局目录生成,<br>在不需要生成目录的单篇文章开头 <code>front-matter</code> 添加 <code>toc: false</code>  </p>
<p><strong>2. 默认不开启：</strong><br> 如果主题配置文件下 <code>toc: false</code> 在需要生成toc的文章开头添加 <code>toc: true</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">Yilia</span> <span class="string">主题添加目录</span></div><div class="line"><span class="attr">toc:</span> <span class="literal">true</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<p><strong>TOC默认的样式</strong><br><img src="/assets/bimg/toc_1.png" alt="toc_1" title="TOC默认样式">  </p>
<h3 id="为目录编写CSS文件"><a href="#为目录编写CSS文件" class="headerlink" title="为目录编写CSS文件"></a>为目录编写CSS文件</h3><p>在<code>themes/yilia/source-src/css/</code> 下新建 <code>toc.scss</code>, 在文件的最后，添加如下样式,并在 <code>main.scss</code> 中引入 <code>@import &quot;./toc&quot;;</code></p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/*toc begin*/</span></div><div class="line"><span class="selector-class">.toc-article</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.2em</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</div><div class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line">    <span class="attribute">float</span>: right;</div><div class="line">    <span class="attribute">max-width</span>: <span class="number">32%</span>;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#C0C0C0</span>;</div><div class="line">    <span class="attribute">white-space</span>: nowrap;</div><div class="line">    <span class="attribute">overflow</span>: hidden; </div><div class="line"></div><div class="line">    <span class="selector-tag">strong</span> &#123;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">0.3em</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">ol</span>,</div><div class="line">    <span class="selector-tag">li</span> &#123;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.2em</span>;</div><div class="line">        <span class="attribute">list-style-type</span>: none;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">ol</span> <span class="selector-tag">li</span>:before &#123;</div><div class="line">        <span class="attribute">display</span>: none;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*下级目录的缩进量 */</span></div><div class="line">    <span class="selector-class">.toc-child</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>: <span class="number">0.8em</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* toc end*/</span></div></pre></td></tr></table></figure>
<p><strong>目录效果预览:</strong><br><img src="/assets/bimg/toc_2.png" alt="toc_2" title="目录效果"></p>
<h3 id="为目录编写js实现展开收起"><a href="#为目录编写js实现展开收起" class="headerlink" title="为目录编写js实现展开收起"></a>为目录编写js实现展开收起</h3><p>在<code>themes/yilia/source-src/js/</code> 下新建 <code>toc.js</code>, 代码如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需要jQuery支持</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span></div><div class="line"> &#123;</div><div class="line">  $(<span class="string">".js-toggle-toc"</span>).css(<span class="string">'color'</span>, <span class="string">'#FF4081'</span>);</div><div class="line">     $(<span class="string">".js-toggle-toc"</span>).text(<span class="string">"丨☆丨 收起  Ⅴ"</span>);</div><div class="line"> </div><div class="line">     $(<span class="string">".js-toggle-toc"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="keyword">var</span> toc = $(<span class="string">".toc-content"</span>);</div><div class="line">         toc.toggle();</div><div class="line">         <span class="keyword">if</span> (toc.is(<span class="string">":hidden"</span>)) &#123;</div><div class="line">             $(<span class="keyword">this</span>).text(<span class="string">"丨★丨 展开 》》"</span>);</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             $(<span class="keyword">this</span>).text(<span class="string">"丨☆丨 收起  Ⅴ"</span>);</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">     &#125;);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">init</span> : init</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>并在 <code>main.js</code> 中加载 <code>toc.js</code> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 目录</span></div><div class="line"><span class="keyword">import</span> Toc <span class="keyword">from</span> <span class="string">'./toc'</span></div><div class="line">addLoadEvent(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Toc.init()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>目录展开收起效果:</strong><br><img src="/assets/bimg/toc_3.gif" alt="toc_3" title="目录展开收起效果"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>只是实现了基本目录功能,并添加了简单的样式，可以根据需求近一步修改和美化.</p>
<p><strong>☆end☆</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从使用Hexo建博客以来,前后体验过好几种主题，其中 &lt;em&gt;Litten&lt;/em&gt; 的 &lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yilia&lt;/a&gt;, 简洁优雅,十分喜欢. 在此表示感谢!!&lt;br&gt;Yilia 主题目前还没有添加toc目录功能,长篇幅文章有目录会显得层次清晰,所以简单的实现并记录之!    &lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="/categories/hexo/"/>
    
    
      <category term="blog" scheme="/tags/blog/"/>
    
      <category term="hexo" scheme="/tags/hexo/"/>
    
      <category term="hexo-theme" scheme="/tags/hexo-theme/"/>
    
  </entry>
  
  <entry>
    <title>小林家的两小只</title>
    <link href="/2017/04/17/first-essay/"/>
    <id>/2017/04/17/first-essay/</id>
    <published>2017-04-17T04:05:29.000Z</published>
    <updated>2017-05-09T10:36:38.449Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i4.buimg.com/567571/061194a964916717.jpg" alt="">  </p>
<a id="more"></a>
<p><img src="https://i2.muimg.com/567571/727f2d4728641c07.jpg" alt="">  </p>
<p>小林家的两小只 0.O!</p>
<div><br>    <object width="340" height="86" data="http://music.163.com/style/swf/widget.swf?sid=465132188&type=2&auto=0&width=320&height=66" type="application/x-shockwave-flash"><br></object><br></div>

<p><strong>☆END☆</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i4.buimg.com/567571/061194a964916717.jpg&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="/categories/essay/"/>
    
    
      <category term="随笔" scheme="/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 tomcat的安装及开机自启动配置</title>
    <link href="/2017/04/12/centos7-tomcat-autostart/"/>
    <id>/2017/04/12/centos7-tomcat-autostart/</id>
    <published>2017-04-11T19:18:17.000Z</published>
    <updated>2017-05-10T12:55:47.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h2><ul>
<li>tomcat是免安装软件,下载tomcat8.x.xx.tar.gz,使用sftp或vsftp等上传到服务器  </li>
<li>通过tar命令直接解压到 /usr/local/ 目录下,为了方便操作,将其修改为tomcat8.<br><code>sudo tar zxvf tomcat8.x.xx.tar.gz -C /usr/local/</code><br><code>sudo mv tomcat8.x.xx tomcat8</code><a id="more"></a>
<h2 id="配置开机运行"><a href="#配置开机运行" class="headerlink" title="配置开机运行"></a>配置开机运行</h2></li>
</ul>
<h3 id="tomcat增加启动参数"><a href="#tomcat增加启动参数" class="headerlink" title="tomcat增加启动参数"></a>tomcat增加启动参数</h3><p>tomcat需要增加一个pid文件,在 _<code>$tomcat_home/bin</code><em> 目录下面，增加 </em><code>setenv.sh</code><em> 配置，</em><code>catalina.sh</code>_ 启动的时候会调用，同时配置java内存参数. 添加如下命令：<br><code>[root@desnbo bin]# vi setenv.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#tomcat startup pid</span></div><div class="line"></div><div class="line"><span class="comment">#set java runtime environment variable </span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_121</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</div><div class="line"></div><div class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/<span class="built_in">local</span>/tomcat8</div><div class="line"><span class="built_in">export</span> CATALINA_BASE=/usr/<span class="built_in">local</span>/tomcat8</div><div class="line"></div><div class="line"><span class="comment">#add tomcat pid</span></div><div class="line">CATALINA_PID=<span class="string">"<span class="variable">$CATALINA_BASE</span>/tomcat.pid"</span></div><div class="line"></div><div class="line"><span class="comment">#add java opts</span></div><div class="line">JAVA_OPTS=<span class="string">"-server -XX:PermSize=256M -XX:MaxPermSize=1024m -Xms512M -Xmx1024M -XX:MaxNewSize=256m"</span></div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> 配置开机运行时,需要再次添加 JAVA_HOME</p>
<h3 id="增加-tomcat-service"><a href="#增加-tomcat-service" class="headerlink" title="增加 tomcat.service"></a>增加 tomcat.service</h3><p>在/usr/lib/systemd/system目录下增加tomcat.service，目录必须是绝对目录,添加如下命令：<br><code>[root@desnbo bin]# vim /usr/lib/systemd/system/tomcat.service</code></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># conf service desc ,set do this after network started</span></div><div class="line"><span class="section">[Unit]</span></div><div class="line"><span class="attr">Description</span>=tomcat </div><div class="line"><span class="attr">After</span>=syslog.target network.target remote-fs.target nss-lookup.target</div><div class="line"></div><div class="line"><span class="comment"># conf service pid, start,stop and restart</span></div><div class="line"><span class="section">[Service]</span></div><div class="line"><span class="attr">Type</span>=forking</div><div class="line"><span class="attr">PIDFile</span>=/usr/local/tomcat8/tomcat.pid</div><div class="line"><span class="attr">ExecStart</span>=/usr/local/tomcat8/bin/startup.sh</div><div class="line"><span class="attr">ExecStop</span>=/bin/kill -s QUIT <span class="variable">$MAINPID</span></div><div class="line"><span class="attr">ExecReload</span>=/bin/kill -s HUP <span class="variable">$MAINPID</span></div><div class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># conf user </span></div><div class="line"><span class="section">[Install]</span></div><div class="line"><span class="attr">WantedBy</span>=multi-user.target</div></pre></td></tr></table></figure>
<p><em>[unit]:</em> 配置了服务的描述，规定了在network启动之后执行，</p>
<p><em>[service]:</em> 配置服务的pid，服务的启动，停止，重启</p>
<p><em>[install]:</em> 配置了使用用户</p>
<h3 id="使用tomcat-service"><a href="#使用tomcat-service" class="headerlink" title="使用tomcat.service"></a>使用tomcat.service</h3><p>centos7使用systemctl替换了service命令,如需设置其他服务,替换此处的tomcat即可,如:<code>systemctl start vsftp.service</code></p>
<ul>
<li><p>启动服务<br>systemctl start tomcat.service</p>
</li>
<li><p>停止服务<br>systemctl stop tomcat.service</p>
</li>
<li><p>重启服务<br>systemctl restart tomcat.service</p>
</li>
<li><p>增加开机启动<br>systemctl enable tomcat.service  </p>
</li>
<li><p>删除开机启动<br>systemctl disable tomcat.service</p>
</li>
</ul>
<p>因为配置pid，在启动的时候会在tomcat的根目录下生产tomcat.pid文件,服务停止后删除.<br>同时tomcat在启动时，执行start不会启动两个tomcat，保证始终只有一个tomcat服务在运行.多个tomcat可以配置在多个目录下，互不影响。</p>
<h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>重启服务器后,通过wget访问,终端输出如下所示,配置tomcat开机自启动成功!</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[desnbo@desnbo ~]$ sudo wget <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.200</span>:<span class="number">8080</span></div><div class="line">--<span class="number">2017</span>-<span class="number">04</span>-<span class="number">12</span> <span class="number">03</span>:<span class="number">09</span>:<span class="number">09</span>--  http://<span class="number">192.168</span><span class="meta">.1</span><span class="meta">.200</span>:<span class="number">8080</span>/</div><div class="line">Connecting to <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.200</span>:<span class="number">8080</span>... connected.</div><div class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</div><div class="line"><span class="symbol">Length:</span> unspecified [text/html]</div><div class="line">Saving to: ‘index.html<span class="meta">.3</span>’</div><div class="line"></div><div class="line">    [ &lt;=&gt;    ] <span class="number">11</span>,<span class="number">230</span>  --.-K/s   <span class="keyword">in</span> 0s</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">12</span> <span class="number">03</span>:<span class="number">09</span>:<span class="number">09</span> (<span class="number">158</span> MB/s) - ‘index.html<span class="meta">.3</span>’ saved [<span class="number">11230</span>]</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/d189f29b6e7dc720.png" alt="" title="CentOS7-Tomcat-1"></p>
<p>同时,客户端浏览器也能成功访问:<br><img src="http://i1.piimg.com/567571/5cb55a9ea03d39bb.png" alt="" title="CentOS7-Tomcat-2"></p>
<p><strong>☆end☆</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装tomcat&quot;&gt;&lt;a href=&quot;#安装tomcat&quot; class=&quot;headerlink&quot; title=&quot;安装tomcat&quot;&gt;&lt;/a&gt;安装tomcat&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;tomcat是免安装软件,下载tomcat8.x.xx.tar.gz,使用sftp或vsftp等上传到服务器  &lt;/li&gt;
&lt;li&gt;通过tar命令直接解压到 /usr/local/ 目录下,为了方便操作,将其修改为tomcat8.&lt;br&gt;&lt;code&gt;sudo tar zxvf tomcat8.x.xx.tar.gz -C /usr/local/&lt;/code&gt;&lt;br&gt;&lt;code&gt;sudo mv tomcat8.x.xx tomcat8&lt;/code&gt;
    
    </summary>
    
      <category term="linux" scheme="/categories/linux/"/>
    
    
      <category term="centos" scheme="/tags/centos/"/>
    
      <category term="tomcat" scheme="/tags/tomcat/"/>
    
      <category term="java" scheme="/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合Quartz作业调度框架</title>
    <link href="/2017/03/29/spring-quartz/"/>
    <id>/2017/03/29/spring-quartz/</id>
    <published>2017-03-29T14:57:14.000Z</published>
    <updated>2017-04-16T16:31:44.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quartz-简介"><a href="#Quartz-简介" class="headerlink" title="Quartz 简介"></a>Quartz 简介</h2><p><strong><a href="http://baike.baidu.com/link?url=cGixKL86QYZcUhrTpGYLjFmOghA5C00HDtBSmxpZxiRwiJhg9sn2FueHAu_v8WxGmJnW_XtY6jyfFS25qu187K" target="_blank" rel="external">Quartz</a></strong>: 是一个完全由java编写的开源作业调度框架。是OpenSymphony开源组织在Job scheduling领域又一个开源项目，它可以与J2EE与J2SE应用程序相结合也可以单独使用。Quartz可以用来创建或简单或复杂的程序。Jobs可以做成标准的Java组件或 EJBs。<br><a id="more"></a></p>
<p>简单地创建一个实现org.quartz.Job接口的java类,实现Job接口包含的唯一方法：<br><code>public void execute(JobExecutionContext context) throws JobExecutionException</code></p>
<p>在自己的Job接口实现类里面，添加一些逻辑到execute()方法。一旦你配置好Job实现类并设定好调度时间表，Quartz将密切注意剩余时间。当调度程序确定该是通知你的作业的时候，Quartz框架将调用你Job实现类（作业类）上的execute()方法并允许做它该做的事情。无需报告任何东西给调度器或调用任何特定的东西。仅仅执行任务和结束任务即可。如果配置你的作业在随后再次被调用，Quartz框架将在恰当的时间再次调用它.</p>
<h2 id="Spring整合-Quartz"><a href="#Spring整合-Quartz" class="headerlink" title="Spring整合 Quartz"></a>Spring整合 Quartz</h2><h4 id="引入quartz-jar"><a href="#引入quartz-jar" class="headerlink" title="引入quartz.jar"></a>引入quartz.jar</h4><p>首先下载 quartz 1.6.1.jar,并加入到项目lib文件夹中;<br>如果是使用Maven构建的项目,在pom.xml中添加如下依赖:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- quartz --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.opensymphony.quartz<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="相关文件的配置"><a href="#相关文件的配置" class="headerlink" title="相关文件的配置"></a>相关文件的配置</h3><p>新建调度工具类TimerTask.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> me.util.quartz;</div><div class="line"><span class="keyword">import</span> me.util.format.FormatUtil;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Quartz定时器调度工具类</div><div class="line"> * <span class="doctag">@author</span> Desnbo</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fnDemo</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"--- begin &gt;&gt;&gt;"</span>);</div><div class="line">        System.out.println(<span class="string">"Quartz 定时器测试---"</span> + FormatUtil.formatDateTime(System.currentTimeMillis()));</div><div class="line">        System.out.println(<span class="string">"--- end &lt;&lt;&lt;"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="配置applicationContext-quartz-xml"><a href="#配置applicationContext-quartz-xml" class="headerlink" title="配置applicationContext-quartz.xml"></a>配置applicationContext-quartz.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans </div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd "&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 1.将要控制的任务配置成Spring可以管理的对象(Bean) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"timerTask"</span> <span class="attr">class</span>=<span class="string">"me.util.quartz.TimerTask"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 2.定义作业业务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jobTask"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 目标对象:指定对应的作业bean --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"timerTask"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 目标方法:指定对应的作业方法 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"fnDemo"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">     <span class="comment">&lt;!-- 3.配置具体的任务执行触发时间 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"doTime"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 指定对应的任务 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"jobTask"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- cron表达式指定对应的执行周期,此处为每30秒执行一次 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0/30 * * * * ?"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 4. 总管理类:设置具体运行的定时任务,如果将lazy-init='false'那么容器启动就会执行调度程序 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"startQuertz"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 定义任务序列,list下可加入其他的调度器--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"doTime"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 设置Spring的监听，项目启动时候初始化 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 指定Spring配置文件的路径,可使用通配符classpath:applicationContext*.xml--&gt;</span> </div><div class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-quartz.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>启动服务器进行测试,控制台输出如下:<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">-- <span class="keyword">begin</span> <span class="meta">&gt;&gt;&gt;</span></span></div><div class="line">Quartz 定时器测试---2017-03-29 21:37:00</div><div class="line">-<span class="ruby">-- <span class="keyword">end</span> &lt;&lt;&lt;</span></div><div class="line">-<span class="ruby">-- <span class="keyword">begin</span> <span class="meta">&gt;&gt;&gt;</span></span></div><div class="line">Quartz 定时器测试---2017-03-29 21:37:30</div><div class="line">-<span class="ruby">-- <span class="keyword">end</span> &lt;&lt;&lt;</span></div><div class="line">-<span class="ruby">-- <span class="keyword">begin</span> <span class="meta">&gt;&gt;&gt;</span></span></div><div class="line">Quartz 定时器测试---2017-03-29 21:38:00</div><div class="line">-<span class="ruby">-- <span class="keyword">end</span> &lt;&lt;&lt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>测试成功! </p>
<ul>
<li>使用时只需在配置文件中注入所需的属性,在相应的方法中添加需要执行的代码即可进行作业调度,实现如库存预警,定时发送邮件等功能.</li>
</ul>
<hr>
<h2 id="关于cron表达式"><a href="#关于cron表达式" class="headerlink" title="关于cron表达式"></a>关于cron表达式</h2><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分开共6个或7个域，每一个域代表一个含义,Cron有如下两种语法格式： </p>
<ul>
<li><strong><code>Seconds Minutes Hours DayofMonth Month DayofWeek Year</code></strong></li>
<li><strong><code>Seconds Minutes Hours DayofMonth Month DayofWeek</code></strong></li>
</ul>
<h4 id="每一个域可出现的字符如下："><a href="#每一个域可出现的字符如下：" class="headerlink" title="每一个域可出现的字符如下："></a>每一个域可出现的字符如下：</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Seconds:</span>可出现,-  *  / 四个字符，有效范围为<span class="number">0</span><span class="number">-59</span>的整数   </div><div class="line"><span class="symbol">Minutes:</span>可出现,-  *  / 四个字符，有效范围为<span class="number">0</span><span class="number">-59</span>的整数   </div><div class="line"><span class="symbol">Hours:</span>可出现,-  *  / 四个字符，有效范围为<span class="number">0</span><span class="number">-23</span>的整数   </div><div class="line"><span class="symbol">DayofMonth:</span>可出现,-  *  / ? L W C八个字符，有效范围为<span class="number">0</span><span class="number">-31</span>的整数    </div><div class="line"><span class="symbol">Month:</span>可出现,-  *  / 四个字符，有效范围为<span class="number">1</span><span class="number">-12</span>的整数或JAN-<span class="keyword">DEc</span>   </div><div class="line"><span class="symbol">DayofWeek:</span>可出现,-  *  / ? L C <span class="meta">#四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推   </span></div><div class="line"><span class="symbol">Year:</span>可出现,-  *  / 四个字符，有效范围为<span class="number">1970</span><span class="number">-2099</span>年</div></pre></td></tr></table></figure>
<h4 id="每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是："><a href="#每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：" class="headerlink" title="每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是："></a>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</h4><ul>
<li><p><code>*</code>：表示匹配该域的任意值，假如在Minutes域使用*,即表示每分钟都会触发事件。</p>
</li>
<li><p><code>?</code>: 只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法:<br>  <code>13 13 15 20 * ?</code><br>其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。   </p>
</li>
<li><p><code>-</code>: 表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次   </p>
</li>
<li><p><code>/</code>：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次.   </p>
</li>
<li><p><code>,</code>: 表示列出枚举值值。例如:在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。  </p>
</li>
<li><p><code>L</code>: 表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。  </p>
</li>
<li><p><code>W</code>: 表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份   </p>
</li>
<li><p><code>LW</code>: 这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。   </p>
</li>
<li><p><code>#</code>: 用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p>
</li>
</ul>
<h4 id="一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素"><a href="#一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素" class="headerlink" title="一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素"></a>一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素</h4><p>按顺序依次为:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">秒（<span class="number">0</span>~<span class="number">59</span>） </div><div class="line">分钟（<span class="number">0</span>~<span class="number">59</span>） </div><div class="line">小时（<span class="number">0</span>~<span class="number">23</span>） </div><div class="line">天（月）（<span class="number">0</span>~<span class="number">31</span>，但是你需要考虑你月的天数） </div><div class="line">月（<span class="number">0</span>~<span class="number">11</span>） </div><div class="line">天（星期）（<span class="number">1</span>~<span class="number">7</span> <span class="number">1</span>=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT） </div><div class="line">年份（<span class="number">1970</span>－<span class="number">2099</span>）</div></pre></td></tr></table></figure></p>
<p>其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于”月份中的日期”和”星期中的日期”这两个元素互斥的,必须要对其中一个设置<code>?</code>。</p>
<h4 id="以下为一些cron表达式示例"><a href="#以下为一些cron表达式示例" class="headerlink" title="以下为一些cron表达式示例"></a>以下为一些cron表达式示例</h4><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">"0<span class="number"> 0 </span>2<span class="number"> 1 </span>* ? *"  表示在每月的1日的凌晨2点调度任务    </div><div class="line">"0<span class="number"> 15 </span>10 ? *  MON-FRI" 表示周一到周五每天上午10：15执行作业            </div><div class="line">"0<span class="number"> 15 </span>10 ? 6L 2002-2006" 表示2002-2006年的每个月的最后一个星期五上午10:15执行作业  </div><div class="line">"0<span class="number"> 0 </span>10,14,16 * * ?" 每天上午10点，下午2点，4点 </div><div class="line">"0 0/30 9-17 * * ?" 朝九晚五工作时间内每半小时 </div><div class="line">"0<span class="number"> 0 </span>12 ? * WED" 表示每个星期三中午12点 </div><div class="line">"0<span class="number"> 0 </span>12 * * ?" 每天中午12点触发 </div><div class="line">"0<span class="number"> 15 </span>10 ? * *" 每天上午10:15触发 </div><div class="line">"0<span class="number"> 15 </span>10 * * ?" 每天上午10:15触发 </div><div class="line">"0<span class="number"> 15 </span>10 * * ? *" 每天上午10:15触发 </div><div class="line">"0<span class="number"> 15 </span>10 * * ? 2005" 2005年的每天上午10:15触发 </div><div class="line">"0 *<span class="number"> 14 </span>* * ?" 在每天下午2点到下午2:59期间的每1分钟触发 </div><div class="line">"0 0/5<span class="number"> 14 </span>* * ?" 在每天下午2点到下午2:55期间的每5分钟触发 </div><div class="line">"0 0/5 14,18 * * ?" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </div><div class="line">"0 0-5<span class="number"> 14 </span>* * ?" 在每天下午2点到下午2:05期间的每1分钟触发 </div><div class="line">"0 10,44<span class="number"> 14 </span>?<span class="number"> 3 </span>WED" 每年三月的星期三的下午2:10和2:44触发 </div><div class="line">"0<span class="number"> 15 </span>10 ? * MON-FRI" 周一至周五的上午10:15触发 </div><div class="line">"0<span class="number"> 15 </span>10<span class="number"> 15 </span>* ?" 每月15日上午10:15触发 </div><div class="line">"0<span class="number"> 15 </span>10 L * ?" 每月最后一日的上午10:15触发 </div><div class="line">"0<span class="number"> 15 </span>10 ? * 6L" 每月的最后一个星期五上午10:15触发 </div><div class="line">"0<span class="number"> 15 </span>10 ? * 6L 2002-2005" 2002年至2005年的每月的最后一个星期五上午10:15触发 </div><div class="line">"0<span class="number"> 15 </span>10 ? * 6<span class="comment">#3" 每月的第三个星期五上午10:15触发</span></div></pre></td></tr></table></figure>
<h4 id="有些子表达式能包含一些范围或列表"><a href="#有些子表达式能包含一些范围或列表" class="headerlink" title="有些子表达式能包含一些范围或列表"></a>有些子表达式能包含一些范围或列表</h4><p>子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT” </p>
<ul>
<li><p><code>*</code> <strong>字符代表所有可能的值</strong>, 因此 <code>*</code> 在子表达式（月）里表示每个月的含义，<code>*</code> 在子表达式（天（星期））表示星期的每一天 </p>
</li>
<li><p><code>/</code> <strong>字符用来指定数值的增量</strong>, 例如：<br><code>/</code> 在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟;<br><code>/</code> 在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样.</p>
</li>
</ul>
<ul>
<li><p><code>?</code> <strong>字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值</strong> ,当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？” </p>
</li>
<li><p><code>L</code> <strong>字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写</strong> ,<br>但是它在两个子表达式里的含义是不同的。<br><code>L</code> 在天（月）子表达式中，“L”表示一个月的最后一天;<br><code>L</code> 在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT </p>
</li>
</ul>
<p><strong>如果在 <code>L</code> 前有具体的内容，它就具有其他的含义了</strong>,例如：<br><code>6L</code> 表示这个月的倒数第６天，<br><code>FRIL</code>表示这个月的最一个星期五.<br><strong>注意</strong>：在使用“L”参数时，不要指定列表或范围，因为这会导致问题 </p>
<h4 id="cron-表达式使用总结"><a href="#cron-表达式使用总结" class="headerlink" title="cron 表达式使用总结"></a>cron 表达式使用总结</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">字段   允许值   允许的特殊字符 </div><div class="line">秒    <span class="number">0</span><span class="number">-59</span>    , - * / </div><div class="line">分    <span class="number">0</span><span class="number">-59</span>    , - * / </div><div class="line">小时    <span class="number">0</span><span class="number">-23</span>    , - * / </div><div class="line">日期    <span class="number">1</span><span class="number">-31</span>    , - * ? / L W C </div><div class="line">月份    <span class="number">1</span><span class="number">-12</span> 或者 JAN-DEC    , - * / </div><div class="line">星期    <span class="number">1</span><span class="number">-7</span> 或者 SUN-SAT    , - * ? / L C # </div><div class="line">年（可选）    留空, <span class="number">1970</span><span class="number">-2099</span>    , - * /</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quartz-简介&quot;&gt;&lt;a href=&quot;#Quartz-简介&quot; class=&quot;headerlink&quot; title=&quot;Quartz 简介&quot;&gt;&lt;/a&gt;Quartz 简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=cGixKL86QYZcUhrTpGYLjFmOghA5C00HDtBSmxpZxiRwiJhg9sn2FueHAu_v8WxGmJnW_XtY6jyfFS25qu187K&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quartz&lt;/a&gt;&lt;/strong&gt;: 是一个完全由java编写的开源作业调度框架。是OpenSymphony开源组织在Job scheduling领域又一个开源项目，它可以与J2EE与J2SE应用程序相结合也可以单独使用。Quartz可以用来创建或简单或复杂的程序。Jobs可以做成标准的Java组件或 EJBs。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="/categories/java/"/>
    
    
      <category term="Spring" scheme="/tags/Spring/"/>
    
      <category term="Quartz" scheme="/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>jQuery + ajax+ json + Struts2 实现表单联动</title>
    <link href="/2017/03/18/form-linkage/"/>
    <id>/2017/03/18/form-linkage/</id>
    <published>2017-03-18T12:52:23.000Z</published>
    <updated>2017-05-09T10:36:58.748Z</updated>
    
    <content type="html"><![CDATA[<p>在进行信息添加的过程中，经常会用到上下联动的需求，如省市联动。商品的供应商和商品类别的联动。如何实现呢？<br><a id="more"></a></p>
<h2 id="预加载数据"><a href="#预加载数据" class="headerlink" title="预加载数据"></a>预加载数据</h2><p>进入商品信息添加页面前，需要加载一些需要的数据  </p>
<ul>
<li>首先要加载所有的供应商信息集合与第一个供应商对应的商品类别集合，并进行展示;</li>
<li>当供应商信息发生变化时，ajax动态加载商品类别信息，并进行展示。</li>
<li>如果供应商的商品类别为空时，直接不加载<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> GoodsModel gm = <span class="keyword">new</span> GoodsModel();</div><div class="line"><span class="comment">// 到添加</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">input</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 加载所有具有类别信息的供应商信息</span></div><div class="line">    List&lt;SupplierModel&gt; supplierList = supplierEbi.getAllUnion();</div><div class="line">    ActionContext.getContext().getSession().put(<span class="string">"supplierList"</span>, supplierList);</div><div class="line">    <span class="comment">// 加载当前选中的供应商对应的所有商品类别信息</span></div><div class="line">    Long supplierUuid = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (gm.getUuid() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 修改操作</span></div><div class="line">        gm = goodsEbi.get(gm.getUuid());</div><div class="line">        supplierUuid = gm.getGtm().getSm().getUuid();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//不是修改操作，默认加载第一个</span></div><div class="line">        supplierUuid = supplierList.get(<span class="number">0</span>).getUuid();</div><div class="line">    &#125;</div><div class="line">    List&lt;GoodsTypeModel&gt; gtmList = goodsTypeEbi.getAllBySupUuid(supplierUuid);</div><div class="line">     ActionContext.getContext().getSession().put(<span class="string">"gtmList"</span>, gtmList);</div><div class="line">    <span class="keyword">return</span> <span class="string">"input"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="页面请求"><a href="#页面请求" class="headerlink" title="页面请求"></a>页面请求</h2><ul>
<li><p>为供应商select添加选项改变事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//为id为supplier 绑定change事件</span></div><div class="line">    $(<span class="string">"#supplier"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>添加测试语句，测试功能是否正常，例如添加alert语句</p>
</li>
<li><p>在操作中发送ajax请求，获取后台数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.post(<span class="string">"goodsType_ajaxGetBySupUuid.action"</span>,&#123;<span class="string">"gm.sm.uuid"</span>:supplierUuid&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中的参数说明:</p>
<ul>
<li>第一次参数：发送的请求url</li>
<li>第二个参数：json格式的参数列表</li>
<li>第三个参数：当前ajax异步请求执行完毕后返回的处理事件，其中data参数封装了后台请求传输的数据</li>
</ul>
<h2 id="后台处理数据"><a href="#后台处理数据" class="headerlink" title="后台处理数据"></a>后台处理数据</h2><ul>
<li>在产品类别<code>GoodsTypeAction</code>中添加对应的方法，根据传递供应商编号获取对应类别信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;GoodsTypeModel&gt; gtmList;</div><div class="line"></div><div class="line"><span class="comment">//ajax获取供应商对应的类别信息</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ajaxGetBySupUuid</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//根据供应商的uuid获取对应的类别信息</span></div><div class="line">        gtmList = goodsTypeEbi.getAllBySm(gm.getSm().getUuid());</div><div class="line">        <span class="keyword">return</span> <span class="string">"ajaxGetBySupUuid"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="如何将数据传递出去"><a href="#如何将数据传递出去" class="headerlink" title="如何将数据传递出去"></a>如何将数据传递出去</h2><p>得到的数据需要转化为json格式,可以使用json工具类JSONArray,或使用struts-json插件。此处使用struts-json插件完成该功能(√) </p>
<h3 id="加入相关jar包"><a href="#加入相关jar包" class="headerlink" title="加入相关jar包"></a>加入相关jar包</h3><p>向项目中加入struts-json对应的jar包 <code>struts-json-plugin.jar</code></p>
<h3 id="提供get方法"><a href="#提供get方法" class="headerlink" title="提供get方法"></a>提供get方法</h3><p>该插件只能将Action类中的get开头的方法数据返回，因此为上述方法对应的数据提供get方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;GoodsTypeModel&gt; <span class="title">getGtmList</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> gtmList;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="配置struts-xml"><a href="#配置struts-xml" class="headerlink" title="配置struts.xml"></a>配置struts.xml</h3><ul>
<li><p>struts.xml文件中开启json数据格式支持，修改默认的继承模式<br>  <code>&lt;package name=&quot;default&quot; namespace=&quot;/&quot; extends=&quot;json-default&quot;&gt;</code></p>
</li>
<li><p>设置对应的结果返回类型为json数据格式类型  <code>type=&quot;json&quot;</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- GoodsType --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"goodsType_*"</span> <span class="attr">class</span>=<span class="string">"goodsTypeAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"ajaxGetBySupUuid"</span> <span class="attr">type</span>=<span class="string">"json"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置数据来源<br>设置返回json数据，并没有指定返回的数据来源，需要指定返回数据来源,有几种常见方式</p>
<ol>
<li>设置数据来源于action类中:<br><code>&lt;param name=&quot;root&quot;&gt;action&lt;/param&gt;</code><br>如果只设置数据来源于action类中，那么此时返回的数据将是Action类中所有的get方法开头的方法返回值，一般需要过滤。</li>
<li>包含过滤设置:<br> <code>&lt;param name=&quot;includeProperties&quot;&gt;gtmList\[\d\]\.uuid,gtmList\[\d\]\.name&lt;/param&gt;</code></li>
<li>排除过滤设置:<br> <code>&lt;param name=&quot;excludeProperties&quot;&gt; gtmList\[\d\]\.sm, &lt;/param&gt;</code></li>
<li>设置数据来源从某个根获取:  (√) <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"root"</span>&gt;</span>action<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"includeProperties"</span>&gt;</span></div><div class="line">        gtmList\[\d\]\.uuid,</div><div class="line">        gtmList\[\d\]\.name</div><div class="line">    <span class="tag">&lt;/<span class="name">param</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>PS: 设置root时，还可以设置对象或者集合对象。<br>如果是对象，则获取的数据为对象json格式转化;<br>如果是集合对象，则获取的数据为集合中的对象数组.<br>上述格式中设置了需要的数据位gtmList集合中每个元素的uuid属性与gtmList集合中每个元素的name属性。</p>
<h2 id="页面获取json数据"><a href="#页面获取json数据" class="headerlink" title="页面获取json数据"></a>页面获取json数据</h2><ul>
<li>请求相应的回调方法的参数data中封装了上述返回的json格式数据,根据json数据的格式特点，获取其中的gtmList数据</li>
<li>将获取的数据拼装成jquery格式的option组件，并添加到对应的select中</li>
<li><p>由于每次都向类别select中添加数据，数据越来越多，应该每次先清除掉原始数据，然后添加。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> supplierUuid = $(<span class="keyword">this</span>).val();</div><div class="line">$.post(<span class="string">"goodsType_ajaxGetBySupUuid.action"</span>,&#123;<span class="string">"gm.sm.uuid"</span>:supplierUuid&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">//清除当前select中的项</span></div><div class="line">    $(<span class="string">"#goodsType"</span>).empty();</div><div class="line">    <span class="keyword">var</span> gtmList=data.gtmList;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i&lt;gtmList.length;i++)&#123;</div><div class="line">        <span class="keyword">var</span> gtm=gtmList[i];</div><div class="line">        <span class="comment">//将获取的数据组织成select中的option选项,然后添加到select中</span></div><div class="line">        $op=$(<span class="string">"&lt;option value='"</span>+gtm.uuid+<span class="string">"'&gt;"</span>+gtm.name+<span class="string">"&lt;/option&gt;"</span>);</div><div class="line">        <span class="comment">//将选项添加到select中</span></div><div class="line">        $(<span class="string">"#goodsType"</span>).append($op);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>效果展示</p>
</li>
</ul>
<p><img src="http://p1.bqimg.com/567571/18c3ab5484d90c16.gif" alt="上下联动效果展示"></p>
<h2 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h2><ul>
<li>jquery发送ajax请求的方式 </li>
<li>struts-json-plugin插件的使用方式</li>
<li>收集数据时，产品数据只需收集其类别数据即可，无需收集对应的供应商编号，毕竟后台数据模型关系式产品与产品类别产生关系。</li>
<li>其他如省市联动等也可以用类似的实现方式，使用起来也是非常方便的。</li>
</ul>
<p><strong>☆end★</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在进行信息添加的过程中，经常会用到上下联动的需求，如省市联动。商品的供应商和商品类别的联动。如何实现呢？&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="/categories/jQuery/"/>
    
    
      <category term="ajax" scheme="/tags/ajax/"/>
    
      <category term="json" scheme="/tags/json/"/>
    
      <category term="jQuery" scheme="/tags/jQuery/"/>
    
      <category term="Struts2" scheme="/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3 OmniMarkupPreviewer 404</title>
    <link href="/2017/03/18/OmniMarkupPreviewer-404/"/>
    <id>/2017/03/18/OmniMarkupPreviewer-404/</id>
    <published>2017-03-18T10:47:27.000Z</published>
    <updated>2017-04-16T17:20:48.701Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h3><blockquote>
<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。</p>
</blockquote>
<p><strong>OmniMarkupPreviewer</strong> :  作为 Sublime Text 的一款强大插件，支持将标记语言渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件。</p>
<a id="more"></a>
<p>第一次使用时报了如下的错误:</p>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p><img src="http://i1.piimg.com/567571/d63a54b1059f34db.png" alt="OmniMarkupPreviewer 404"><br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Sorry, the requested URL <span class="symbol">'http</span>://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">51004</span>/view/<span class="number">61</span>' caused an <span class="literal">error</span>:</div><div class="line"></div><div class="line"><span class="symbol">'buffer_id</span>(<span class="number">61</span>) <span class="keyword">is</span> <span class="keyword">not</span> valid (closed <span class="keyword">or</span> unsupported <span class="keyword">file</span> format)'</div><div class="line"></div><div class="line">**<span class="literal">NOTE</span>:** <span class="keyword">If</span> you run multiple instances <span class="keyword">of</span> Sublime <span class="literal">Text</span>, you may want <span class="keyword">to</span> adjust</div><div class="line">the `server_port` option <span class="keyword">in</span> order <span class="keyword">to</span> get this plugin work again.</div></pre></td></tr></table></figure></p>
<h3 id="SublimeText-console-log"><a href="#SublimeText-console-log" class="headerlink" title="SublimeText console log"></a>SublimeText console log</h3><p><img src="http://p1.bqimg.com/567571/08b0966e63d30cb4.png" alt=""><br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">SyntaxError: unexpected EOF while parsing</div><div class="line">OmniMarkupPreviewer: [INFO] Launching web browser for http://localhost:51004/view/42</div><div class="line">OmniMarkupPreviewer: [ERROR] Exception occured while rendering using MarkdownRenderer</div><div class="line">  Traceback (most recent call last):  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>ublime Text 3<span class="symbol">\P</span>ackages<span class="symbol">\O</span>mniMarkupPreviewer<span class="symbol">\O</span>mniMarkupLib<span class="symbol">\R</span>endererManager.py", line 266, in render_text</div><div class="line">    rendered_text = renderer.render(text, filename=filename)</div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>ublime Text 3<span class="symbol">\P</span>ackages<span class="symbol">\O</span>mniMarkupPreviewer<span class="symbol">\O</span>mniMarkupLib<span class="symbol">\R</span>enderers/MarkdownRenderer.py", line 48, in render</div><div class="line">    extensions=self.extensions)  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>UBLIM~1<span class="symbol">\P</span>ackages<span class="symbol">\P</span>YTHON~1<span class="symbol">\s</span>t3<span class="symbol">\m</span>arkdown<span class="symbol">\_</span>_init__.py", line 493, in markdown</div><div class="line">    md = Markdown(*args, **kwargs)  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>UBLIM~1<span class="symbol">\P</span>ackages<span class="symbol">\P</span>YTHON~1<span class="symbol">\s</span>t3<span class="symbol">\m</span>arkdown<span class="symbol">\_</span>_init__.py", line 159, in __init__</div><div class="line">    configs=kwargs.get('extension_configs', &#123;&#125;))  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>UBLIM~1<span class="symbol">\P</span>ackages<span class="symbol">\P</span>YTHON~1<span class="symbol">\s</span>t3<span class="symbol">\m</span>arkdown<span class="symbol">\_</span>_init__.py", line 185, in registerExtensions</div><div class="line">    ext = self.build_extension(ext, configs.get(ext, &#123;&#125;))  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>UBLIM~1<span class="symbol">\P</span>ackages<span class="symbol">\P</span>YTHON~1<span class="symbol">\s</span>t3<span class="symbol">\m</span>arkdown<span class="symbol">\_</span>_init__.py", line 291, in build_extension</div><div class="line">    return module.makeExtension(**configs)  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>ublime Text 3<span class="symbol">\P</span>ackages<span class="symbol">\O</span>mniMarkupPreviewer<span class="symbol">\O</span>mniMarkupLib<span class="symbol">\R</span>enderers<span class="symbol">\l</span>ibs<span class="symbol">\m</span>dx_strikeout.py", line 17, in makeExtension</div><div class="line">    return StrikeoutExtension(configs=configs)  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>UBLIM~1<span class="symbol">\P</span>ackages<span class="symbol">\P</span>YTHON~1<span class="symbol">\s</span>t3<span class="symbol">\m</span>arkdown<span class="symbol">\e</span>xtensions<span class="symbol">\_</span>_init__.py", line 51, in __init__</div><div class="line">    self.setConfigs(kwargs)  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>UBLIM~1<span class="symbol">\P</span>ackages<span class="symbol">\P</span>YTHON~1<span class="symbol">\s</span>t3<span class="symbol">\m</span>arkdown<span class="symbol">\e</span>xtensions<span class="symbol">\_</span>_init__.py", line 82, in setConfigs</div><div class="line">    self.setConfig(key, value)  </div><div class="line"></div><div class="line">    File "~<span class="symbol">\S</span>UBLIM~1<span class="symbol">\P</span>ackages<span class="symbol">\P</span>YTHON~1<span class="symbol">\s</span>t3<span class="symbol">\m</span>arkdown<span class="symbol">\e</span>xtensions<span class="symbol">\_</span>_init__.py", line 70, in setConfig</div><div class="line">    if isinstance(self.config[key][0], bool):</div><div class="line">    KeyError: 'configs'</div></pre></td></tr></table></figure></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>错误原因是默认扩展中的<code>strikeout</code>不能正常加载。</p>
<p>Sublime Text &gt; Preferences &gt; Package Settings &gt; OmniMarkupPreviewer &gt; Settings - User<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"renderer_options-MarkdownRenderer"</span>: &#123;</div><div class="line">        <span class="attr">"extensions"</span>: [<span class="string">"tables"</span>, <span class="string">"fenced_code"</span>, <span class="string">"codehilite"</span>]</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置保存后就可以正常使用了.<br><img src="http://p1.bqimg.com/567571/060c0e2af82e4469.png" alt="OmniMarkupPreviewer"></p>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>这虽然是一个小问题，但是由于还不熟悉Python，花了一些时间折腾，<code>OmniMarkupPreviewer</code>+ <code>MarkdownEditing</code>插件的结合，使用Sublime Text3 中进行markdown语法编辑和写作十分的方便,特此记录下来.</p>
<h2 id="☆-end-☆"><a href="#☆-end-☆" class="headerlink" title="☆-end-☆"></a>☆-end-☆</h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-Markdown&quot;&gt;&lt;a href=&quot;#什么是-Markdown&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown&quot;&gt;&lt;/a&gt;什么是 Markdown&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;OmniMarkupPreviewer&lt;/strong&gt; :  作为 Sublime Text 的一款强大插件，支持将标记语言渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件。&lt;/p&gt;
    
    </summary>
    
      <category term="SublimeText" scheme="/categories/SublimeText/"/>
    
    
      <category term="SublimeText" scheme="/tags/SublimeText/"/>
    
      <category term="Markdown" scheme="/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>JQuery树状结构 jQuery Treeview 的使用</title>
    <link href="/2017/03/17/jQuery-treeview-plugin/"/>
    <id>/2017/03/17/jQuery-treeview-plugin/</id>
    <published>2017-03-17T12:43:13.000Z</published>
    <updated>2017-05-04T06:17:24.053Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，我们经常会需要一些树状结构的样式来显示层级结构，菜单等，利用Jquery的一些插件，可以实现这些效果的，如Jquery.treeview。jquery treeview树控件是一款非常实用的jquery插件。</p>
<p><img src="http://p1.bqimg.com/567571/f1951362bac7bc5f.png" alt="" title="树状结构"></p>
<a id="more"></a>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>参数说明参看 <a href="http://www.cnblogs.com/akingyao/archive/2013/01/16/2862553.html" target="_blank" rel="external">jQuery treeview 插件参数说明</a></li>
<li>其中 <strong>url ：String</strong> : 异步加载时，设置url地址。需要返回的是一个json数组。</li>
<li>json数组相关节点的属性如下：<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">text</span>          : <span class="keyword">String</span>    <span class="comment">// 文本</span></div><div class="line">      hasChildren   : <span class="keyword">boolean</span>   <span class="comment">// 是否有子菜单</span></div><div class="line">      children      ：json[]    <span class="comment">// 子菜单信息</span></div><div class="line">      expanded      : <span class="keyword">boolean</span>   <span class="comment">// 是否展开</span></div><div class="line">      classes       : <span class="keyword">String</span>    <span class="comment">// 样式们 class="aa bb cc "</span></div><div class="line">      id            ：<span class="keyword">String</span>    <span class="comment">// 唯一标识</span></div><div class="line">    &#125; </div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在项目中导入相关的文件"><a href="#在项目中导入相关的文件" class="headerlink" title="在项目中导入相关的文件"></a>在项目中导入相关的文件</h3><ul>
<li>下载文件，treeview开源地址：<a href="https://github.com/jzaefferer/jquery-treeview" target="_blank" rel="external">https://github.com/jzaefferer/jquery-treeview</a></li>
<li>将treeview导入项目[app]/js/,<br><img src="http://i1.piimg.com/567571/46511bae77371454.png" alt="jQuery目录结构"><br>其中：  <ul>
<li>jquery-1.8.3.js treeview依赖jquery库</li>
<li>images文件夹  插件相关的图标文件</li>
<li>screen.css  屏幕显示相关css</li>
<li>jquery.treeview.css  核心css</li>
<li>jquery.treeview.min.js  核心js</li>
<li>jquery.treeview.async.js  支持异步</li>
<li>jquery.cookie.js  支持缓存</li>
</ul>
</li>
</ul>
<h3 id="页面的实现"><a href="#页面的实现" class="headerlink" title="页面的实现"></a>页面的实现</h3><p>新建一个menu.jsp文件，用于菜单结构的异步加载显示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>  <span class="attr">href</span>=<span class="string">"js/treeview/jquery.treeview.css"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>  <span class="attr">href</span>=<span class="string">"js/treeview/screen.css"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.js"</span>    <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/treeview/jquery.cookie.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/treeview/jquery.treeview.min.js"</span>    <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/treeview/jquery.treeview.async.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"black"</span> <span class="attr">class</span>=<span class="string">"filetree"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">"#black"</span>).treeview(&#123;</div><div class="line">            <span class="attr">url</span> : <span class="string">"menu_showMenu.action"</span></div><div class="line">        &#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="web层实现"><a href="#web层实现" class="headerlink" title="web层实现"></a>web层实现</h3><p>在MenuAction类中添加showMenu()方法，用于菜单显示数据的处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 显示菜单</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</div><div class="line">    <span class="comment">// Spring注入业务层接口</span></div><div class="line">    <span class="keyword">private</span> MenuEbi menuEbi;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuEbi</span><span class="params">(MenuEbi menuEbi)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.menuEbi = menuEbi;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//中文乱码解决</span></div><div class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">        PrintWriter pw = response.getWriter();</div><div class="line"></div><div class="line">        <span class="comment">// 1.首先获取root参数</span></div><div class="line">        String root = ServletActionContext.getRequest().getParameter(<span class="string">"root"</span>);</div><div class="line">        <span class="comment">// 2.判断参数值 source id</span></div><div class="line">        HttpServletResponse response = ServletActionContext.getResponse();</div><div class="line">        <span class="comment">//从session中获取当前登录用户</span></div><div class="line">        EmpModel loginEm = (EmpModel) ServletActionContext.getRequest().getSession().getAttribute(<span class="string">"loginEm"</span>);</div><div class="line"></div><div class="line">        StringBuilder json = <span class="keyword">new</span> StringBuilder();</div><div class="line">        json.append(<span class="string">"["</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="string">"source"</span>.equals(root)) &#123;</div><div class="line">            <span class="comment">// 生成一级菜单</span></div><div class="line">            <span class="comment">//获取当前登录用户可操作的一级菜单</span></div><div class="line">            List&lt;MenuModel&gt; menuList = menuEbi.getAllOneLevelByEmp(loginEm.getUuid());</div><div class="line">            <span class="keyword">for</span> (MenuModel temp : menuList) &#123;</div><div class="line">                json.append(<span class="string">"&#123;\"text\":\""</span>);</div><div class="line">                json.append(temp.getName());</div><div class="line">                json.append(<span class="string">"\",\"hasChildren\":true,\"classes\":\"folder\",\"id\":\""</span>);</div><div class="line">                json.append(temp.getUuid());</div><div class="line">                json.append(<span class="string">"\"&#125;,"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 生成二级菜单项</span></div><div class="line">            <span class="comment">// 获取指定一级菜单的二级菜单项</span></div><div class="line">            Long puuid = <span class="keyword">new</span> Long(root);</div><div class="line">            List&lt;MenuModel&gt; menuList = menuEbi.getByEmpAndPuuid(loginEm.getUuid(), puuid);</div><div class="line">            <span class="keyword">for</span> (MenuModel temp : menuList) &#123;</div><div class="line">                json.append(<span class="string">"&#123;\"text\":\"&lt;a class='hei' target='main' href='"</span>);</div><div class="line">                json.append(temp.getUrl());</div><div class="line">                json.append(<span class="string">"'&gt;"</span>);</div><div class="line">                json.append(temp.getName());</div><div class="line">                json.append(<span class="string">"&lt;/a&gt;\",\"hasChildren\":false,\"classes\":\"file\"&#125;,"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//删除最后一个','号</span></div><div class="line">        json.deleteCharAt(json.length() - <span class="number">1</span>);</div><div class="line">        json.append(<span class="string">"]"</span>);</div><div class="line"></div><div class="line">        pw.write(json.toString());</div><div class="line">        pw.flush();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="业务层实现"><a href="#业务层实现" class="headerlink" title="业务层实现"></a>业务层实现</h3><ul>
<li><p>业务层接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//开启事务</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MenuEbi</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取指定员工可操作的一级菜单</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> uuid 员工uuid</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;MenuModel&gt; <span class="title">getAllOneLevelByEmp</span><span class="params">(Long uuid)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取指定员工对应的指定一级菜单可操作的二级菜单</div><div class="line">     * <span class="doctag">@param</span> uuid 员工uuid</div><div class="line">     * <span class="doctag">@param</span> puuid 一级菜单uuid</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;MenuModel&gt; <span class="title">getByEmpAndPuuid</span><span class="params">(Long uuid, Long puuid)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>业务层实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuEbo</span> <span class="keyword">implements</span> <span class="title">MenuEbi</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;MenuModel&gt; <span class="title">getAllOneLevelByEmp</span><span class="params">(Long uuid)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> menuDao.getAllOneLevelByEmp(uuid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;MenuModel&gt; <span class="title">getByEmpAndPuuid</span><span class="params">(Long uuid, Long puuid)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> menuDao.getByEmpAndPuuid(uuid, puuid);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="持久层实现"><a href="#持久层实现" class="headerlink" title="持久层实现"></a>持久层实现</h3><ul>
<li><p>持久层接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MenuDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;MenuModel&gt; <span class="title">getAllOneLevelByEmp</span><span class="params">(Long uuid)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;MenuModel&gt; <span class="title">getByEmpAndPuuid</span><span class="params">(Long uuid, Long puuid)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>持久层实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">MenuDao</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取系统菜单的子菜单</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;MenuModel&gt; <span class="title">getAllOneLevelByEmp</span><span class="params">(Long uuid)</span> </span>&#123;</div><div class="line">        <span class="comment">// menu-&gt;role-&gt;emp</span></div><div class="line">        String hql = <span class="string">"select distinct menu from MenuModel menu join menu.roles role join role.emps emp where emp.uuid = ? and menu.parent.uuid = ? order by menu.uuid"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getHibernateTemplate().find(hql, uuid, MenuModel.MENU_SYSTEM_MENU_UUID);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取指定菜单的子菜单</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;MenuModel&gt; <span class="title">getByEmpAndPuuid</span><span class="params">(Long uuid, Long puuid)</span> </span>&#123;</div><div class="line">        String hql = <span class="string">"select distinct menu from MenuModel menu join menu.roles role join role.emps emp where emp.uuid = ? and menu.parent.uuid = ? order by menu.uuid"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getHibernateTemplate().find(hql, uuid, puuid);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="页面显示"><a href="#页面显示" class="headerlink" title="页面显示"></a>页面显示</h3><ul>
<li><p>在主页面main.jsp中相应位置引入 menu.jsp </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left-bottom"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%@include</span> <span class="attr">file</span>=<span class="string">"/WEB-INF/jsps/tools/menu.jsp"</span>%&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>最终效果：<br><img src="http://p1.bqimg.com/567571/7f3234444b538e28.png" alt="jQuery treeview 效果图" title="维护相关的菜单展示"><br><img src="http://p1.bpimg.com/567571/331a5f90cf0bb58b.png" alt="jQuery treeview 效果图" title="系统菜单展示"></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>利用 jQuery treeview 实现树状效果十分方便,本次使用了它的异步加载实现了菜单功能,而其他的实现也是类似的,熟悉之后也能轻松的使用.</li>
</ul>
<h2 id="☆-end-☆"><a href="#☆-end-☆" class="headerlink" title="☆-end-☆"></a>☆-end-☆</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中，我们经常会需要一些树状结构的样式来显示层级结构，菜单等，利用Jquery的一些插件，可以实现这些效果的，如Jquery.treeview。jquery treeview树控件是一款非常实用的jquery插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.bqimg.com/567571/f1951362bac7bc5f.png&quot; alt=&quot;&quot; title=&quot;树状结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="jQuery" scheme="/categories/jQuery/"/>
    
    
      <category term="jquery" scheme="/tags/jquery/"/>
    
      <category term="treeview" scheme="/tags/treeview/"/>
    
      <category term="javaweb" scheme="/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat JNDI数据源配置和使用</title>
    <link href="/2017/03/15/tomcat-datasource/"/>
    <id>/2017/03/15/tomcat-datasource/</id>
    <published>2017-03-15T09:37:30.000Z</published>
    <updated>2017-05-09T10:41:22.944Z</updated>
    
    <content type="html"><![CDATA[<p>进行实际业务开发时，如果使用的不是专用的应用服务器与数据库服务器，那么往往是在网络上租用一个虚拟的服务器空间，将WEB应用的war包放入服务器空间内，将数据库相关信息放入指定的数据库服务器空间内。</p>
<p>当应用启动时，会根据使用需要创建对应的数据库连接对象。但是如果该服务器上WEB应用过多时，每个WEB应用都有自己的数据库连接管理方式。而WEB服务器连接的数据库地址又唯一。此时如果数据库服务器进行迁移，会造成大多数WEB应用无法正常工作。</p>
<p>比较合理的解决方案是将Tomcat服务器与数据库服务器的连接关系进行统一配置，所有的应用都使用该配置，这样就不会造成数据库服务器迁移导致应用无法正常工作的现象。如果用户连接的是专用数据库服务器，即便上述操作修改，也不会产生影响。</p>
<a id="more"></a>
<p><strong>Tomcat数据源</strong> 是一种将数据库的连接配置信息在服务器端（客户端独立配置）进行配置，当服务器启动时，创建该对象。用户只需要根据对应的名称进行获取就可以了。</p>
<p><img src="http://i1.piimg.com/567571/00b35a49a79b41ba.png" alt="Tomcat 数据源"></p>
<h3 id="配置Tomcat数据源"><a href="#配置Tomcat数据源" class="headerlink" title="配置Tomcat数据源"></a>配置Tomcat数据源</h3><ul>
<li>修改tomcat安装目录/conf/context.xml，添加如下配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Resource</span> </span></div><div class="line"><span class="attr">name</span>=<span class="string">"jdbc/DataSource"</span> </div><div class="line"><span class="attr">auth</span>=<span class="string">"Container"</span> </div><div class="line"><span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></div><div class="line"><span class="attr">maxActive</span>=<span class="string">"100"</span> </div><div class="line"><span class="attr">maxIdle</span>=<span class="string">"30"</span> </div><div class="line"><span class="attr">maxWait</span>=<span class="string">"10000"</span></div><div class="line"><span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/[app]"</span></div><div class="line"><span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></div><div class="line"><span class="attr">username</span>=<span class="string">"root"</span> </div><div class="line"><span class="attr">password</span>=<span class="string">"123456"</span> </div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="配置Web应用使用Tomcat数据源"><a href="#配置Web应用使用Tomcat数据源" class="headerlink" title="配置Web应用使用Tomcat数据源"></a>配置Web应用使用Tomcat数据源</h3><ul>
<li>修改WEB-INF/web.xml，添加如下配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">res-ref-name</span>&gt;</span>jdbc/DataSource<span class="tag">&lt;/<span class="name">res-ref-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">res-type</span>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<span class="name">res-type</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">res-auth</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">res-auth</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置Spring核心配置文件中使用数据源"><a href="#配置Spring核心配置文件中使用数据源" class="headerlink" title="配置Spring核心配置文件中使用数据源"></a>配置Spring核心配置文件中使用数据源</h3><ul>
<li>开启jee命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span></span></div><div class="line"><span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">    http://www.springframework.org/schema/jee </div><div class="line">    http://www.springframework.org/schema/jee/spring-jee-3.2.xsd</div><div class="line">    "&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>使用jee命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 通过获取服务器配置的数据源，获取数据库连接的信息 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jee:jndi-lookup</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> </span></div><div class="line"><span class="attr">jndi-name</span>=<span class="string">"java:comp/env/jdbc/DataSource"</span>/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>重启服务器，测试功能。测试通过，可以正常登陆</li>
</ul>
<h3 id="知识总结"><a href="#知识总结" class="headerlink" title="[知识总结]"></a>[知识总结]</h3><ul>
<li><p>有关数据源对象的配置方式有很多种，此处仅为其中一种开发方式，而且此方式没有强依赖关系（其他配置方式中存在）。</p>
</li>
<li><p><strong>JNDI</strong> ：(Java Naming and Directory Interface)Java命名和目录接口，是SUN公司提供的一种标准的Java命名系统接口,一个应用程序设计的API，它为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口，类似JDBC都是构建在抽象层上。<br>JNDI名是远端访问的通用名称，可以理解为使用该名称获取对应的资源信息。<br>JNDI的命名官方规范=&gt; java:comp/env/JNDI名称<br>Jboss=&gt; java:JNDI名称<br>Weblogic=&gt; JNDI名称</p>
</li>
</ul>
<h3 id="开发技巧"><a href="#开发技巧" class="headerlink" title="[开发技巧]"></a>[开发技巧]</h3><ol>
<li><p>数据源在配置时，如果是绑定项目的，需要将数据库驱动jar包拷贝到tomcat的lib包下，否则服务器加载时无法找到驱动包，抛出异常</p>
</li>
<li><p>JNDI规范是J2EE标准定义，但是不同服务器厂商的定义规则有所不同，使用时需要进行区分对待</p>
</li>
<li><p>在进行测试功能的执行时，由于SessionFactory仍然需要加载，而此时服务器无需启动，造成DataSource对应的Bean无法加载，抛出异常。推荐开发阶段使用原始的DataSource，上线后修改为服务器数据源。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进行实际业务开发时，如果使用的不是专用的应用服务器与数据库服务器，那么往往是在网络上租用一个虚拟的服务器空间，将WEB应用的war包放入服务器空间内，将数据库相关信息放入指定的数据库服务器空间内。&lt;/p&gt;
&lt;p&gt;当应用启动时，会根据使用需要创建对应的数据库连接对象。但是如果该服务器上WEB应用过多时，每个WEB应用都有自己的数据库连接管理方式。而WEB服务器连接的数据库地址又唯一。此时如果数据库服务器进行迁移，会造成大多数WEB应用无法正常工作。&lt;/p&gt;
&lt;p&gt;比较合理的解决方案是将Tomcat服务器与数据库服务器的连接关系进行统一配置，所有的应用都使用该配置，这样就不会造成数据库服务器迁移导致应用无法正常工作的现象。如果用户连接的是专用数据库服务器，即便上述操作修改，也不会产生影响。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="/categories/java/"/>
    
    
      <category term="tomcat" scheme="/tags/tomcat/"/>
    
      <category term="datasouce" scheme="/tags/datasouce/"/>
    
      <category term="JNDI" scheme="/tags/JNDI/"/>
    
  </entry>
  
  <entry>
    <title>java使用视图值显示数据</title>
    <link href="/2017/03/11/java-view-data/"/>
    <id>/2017/03/11/java-view-data/</id>
    <published>2017-03-10T19:03:31.000Z</published>
    <updated>2017-05-09T10:38:28.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java视图值的使用"><a href="#java视图值的使用" class="headerlink" title="java视图值的使用"></a>java视图值的使用</h2><p>开发中,数据库字段如：日期Long,性别int 在页面的显示问题。  </p>
<p><strong>视图值</strong>: 视图值是一种用于界面显示的变量值,该值不具体对应某个数据库字段,它服务与某个数据库字段。<br>  当数据库中的某个字段值不便于显示时，为该字段添加视图值，用于显示对应的信息。</p>
<ol>
<li>在Model中定义一个String类型的变量,变量名是无法合理显示的字段名+View</li>
<li>为其提供get方法</li>
<li>在其对应变量的set方法中对这个View值进行初始化</li>
</ol>
<a id="more"></a>
<h3 id="日期类型视图值"><a href="#日期类型视图值" class="headerlink" title="日期类型视图值"></a>日期类型视图值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Long birthday; <span class="comment">//出生日期</span></div><div class="line"><span class="keyword">public</span> String birthdayView; <span class="comment">//为字段birthday添加视图值</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBirthdayView</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> birthdayView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在相应字段的set方法中初始化视图值</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Long birthday)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.birthday = birthday;</div><div class="line">    <span class="keyword">this</span>.birthdayView = FormatUtil.formatDate(birthday);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//日期通用格式化工具类 </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormatUtil</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">formatDate</span><span class="params">(Long time)</span></span>&#123;</div><div class="line">        DateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">        <span class="keyword">return</span> df.format(<span class="keyword">new</span> Date(time));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">formatTime</span><span class="params">(Long time)</span></span>&#123;</div><div class="line">        DateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</div><div class="line">        <span class="keyword">return</span> df.format(<span class="keyword">new</span> Date(time));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">formatDateTime</span><span class="params">(Long time)</span></span>&#123;</div><div class="line">        DateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">        <span class="keyword">return</span> df.format(<span class="keyword">new</span> Date(time));</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="性别类型的视图值"><a href="#性别类型的视图值" class="headerlink" title="性别类型的视图值"></a>性别类型的视图值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Integer gender; <span class="comment">//性别:1-男;0-女</span></div><div class="line"><span class="keyword">public</span> String genderView; <span class="comment">//性别字段视图值</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGenderView</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> genderView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.gender = gender;</div><div class="line">    <span class="keyword">this</span>.genderView = gender == <span class="number">1</span> ? <span class="string">"男"</span> : <span class="string">"女"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在页面上通过 OGNL 或 EL 表达式取值</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;s:iterator value="empList"&gt;</div><div class="line">    &lt;s:property value="birthdayView"/&gt;</div><div class="line">    &lt;td&gt;$&#123;genderView&#125;&lt;/td&gt;</div><div class="line">&lt;/s:iterator&gt;</div></pre></td></tr></table></figure>
<ul>
<li>如果相应的取值太多,可以采用如下方式:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据结构思想应用</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer EMP_GENDER_OF_MAN = <span class="number">1</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer EMP_GENDER_OF_WOMAN = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMP_GENDER_OF_MAN_VIEW = <span class="string">"男"</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMP_GENDER_OF_WOMAN_VIEW = <span class="string">"女"</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, String&gt; genderMap = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</div><div class="line"><span class="keyword">static</span>&#123;</div><div class="line">genderMap.put(EMP_GENDER_OF_MAN, EMP_GENDER_OF_MAN_VIEW);</div><div class="line">genderMap.put(EMP_GENDER_OF_WOMAN, EMP_GENDER_OF_WOMAN_VIEW);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>相应的初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.gender = gender;</div><div class="line">    <span class="keyword">this</span>.genderView = genderMap.get(gender);</div><div class="line">&#125;  </div><div class="line">```  </div><div class="line">同时，在页面标签中可以通过如下方式动态的调用回显:(需要设置genderMap 为<span class="keyword">public</span>)</div></pre></td></tr></table></figure>
<p><s:select list="@me.erp.auth.emp.vo.EmpModel@genderMap" name="em.gender"><br>```</s:select></p>
<p>现在开发中更为普遍的是使用<strong>数据字典</strong>来解决此类问题.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java视图值的使用&quot;&gt;&lt;a href=&quot;#java视图值的使用&quot; class=&quot;headerlink&quot; title=&quot;java视图值的使用&quot;&gt;&lt;/a&gt;java视图值的使用&lt;/h2&gt;&lt;p&gt;开发中,数据库字段如：日期Long,性别int 在页面的显示问题。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视图值&lt;/strong&gt;: 视图值是一种用于界面显示的变量值,该值不具体对应某个数据库字段,它服务与某个数据库字段。&lt;br&gt;  当数据库中的某个字段值不便于显示时，为该字段添加视图值，用于显示对应的信息。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Model中定义一个String类型的变量,变量名是无法合理显示的字段名+View&lt;/li&gt;
&lt;li&gt;为其提供get方法&lt;/li&gt;
&lt;li&gt;在其对应变量的set方法中对这个View值进行初始化&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="java" scheme="/categories/java/"/>
    
    
      <category term="javaweb" scheme="/tags/javaweb/"/>
    
      <category term="viewdata" scheme="/tags/viewdata/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2017/03/09/hello-hexo/"/>
    <id>/2017/03/09/hello-hexo/</id>
    <published>2017-03-09T08:30:01.109Z</published>
    <updated>2017-05-14T07:22:28.347Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h4 id="Run-server-1"><a href="#Run-server-1" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h5 id="Run-server-2"><a href="#Run-server-2" class="headerlink" title="Run server"></a>Run server</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h5 id="Run-server-3"><a href="#Run-server-3" class="headerlink" title="Run server"></a>Run server</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="☆end☆"><a href="#☆end☆" class="headerlink" title="☆end☆"></a>☆end☆</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
